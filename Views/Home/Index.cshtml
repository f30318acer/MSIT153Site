@{
    ViewData["Title"] = "Home Page";
}


@*所有網頁上的p標籤資料會字體顏色變成橘色這裡會被放在layout那裏*@
@section Styles{
    <style>
        p {
            color: tomato
        }

        h1 {
            color: yellow
        }

        .display-4 {
            font-size: 100px
        }

        #tableEmployee {
            background-color: tan
        }
    </style>
}



<div class="text-center">
    <h1 class="display-4">Welcome To MSIT</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    //資料的大小與敏感性會決定您使用get、post
    <form>
        <input type="text" name="userName" />
        <input type="password" name="userAge" />
        <input type="submit" />
    </form>
    <table id="tableEmployee" class="table table-bordered  table-hover">
        <thead>
            <tr>
                <th>姓名</th>
                <th>年資</th>
                <th>薪水</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

@section Scripts{
    <script>
        //const emps = [{ "name": "Tom", "workYears": 3, "salary": 35000 },
        //{ "name": "Jack", "workYears": 5, "salary": 40000 },
        //{ "name": "Mary", "workYears": 7, "salary": 45000 }];
        //=========================================================================

        //emps = [];//陣列結構
        // console.log(emps[1]);//讀取陣列第一筆

        //emps = [1]={};//物件
        // console.log(emps[1].name);//讀取物件第一筆
        //=========================================================================

        //for(let i=0,max=emps.length;i<max;i++)
        // {
        //    console.log(emps[i].name);
        //    console.log(emps[i].workYears);
        //    console.log(emps[i].salary);
        // }
        //=========================================================================
        var emp =
        {
            "employees": [
                { "name": "Tom", "workYears": 3, "salary": 35000 },
                { "name": "Jack", "workYears": 5, "salary": 40000 },
                { "name": "Mary", "workYears": 7, "salary": 45000 }
            ]
        };

        //emp = {} x emp.length  v emp.employees
        //emp.employees = [] emp.employees[0]
        //emp.employees[0] => {} emp.employees[0].name
        //     for(let i=0,max=emp.employees.length;i<max;i++){
        // //        //DOM
        // const cell1 = document.createElement("td");  //<td></td>
        // const txt1 = document.createTextNode(emp.employees[i].name) //Tom
        // cell1.appendChild(txt1);  //<td>Tom</td>
        // const cell2 = document.createElement("td");  //<td></td>
        // const txt2 = document.createTextNode(emp.employees[i].workYears) //Tom
        // cell2.appendChild(txt2);  //<td>Tom</td>
        // const cell3 = document.createElement("td");  //<td></td>
        // const txt3 = document.createTextNode(emp.employees[i].salary) //Tom
        // cell3.appendChild(txt3);  //<td>Tom</td>
        // const row = document.createElement("tr");
        // row.appendChild(cell1);
        // row.appendChild(cell2);
        // row.appendChild(cell3);

        // document.querySelector('#tableEmployee>tbody').appendChild(row);
        //     }

        // javascript陣列
        //value放的是我們的物件
        // emp.employees.map((value,index,array)=> {
        //     console.log(array)
        // })

        const datas = emp.employees.map(employee => {
            const { name, workYears, salary } = employee;
            //反單引號裡面可以放字串的
            return (
                `
                        <tr>
                                <td>${name}</td>
                                <td>${workYears}</td>
                                <td>${salary}</td>
                        </tr>
                `
            )
        })
        //console.log(datas)//陣列資料

        //join方法=>
        document.querySelector('#tableEmployee>tbody').innerHTML = datas.join("");

    </script>
}

